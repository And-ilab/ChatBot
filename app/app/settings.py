"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

from logging.handlers import TimedRotatingFileHandler
from config import config_settings
from datetime import datetime

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config_settings.SECRET_KEY_django

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SESSION_DURATION_MINUTES = 30

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ALLOWED_HOSTS = [
    '134.17.17.131',
    'localhost',
    '127.0.0.1',
    'chatbot.digitranslab.com',
    'www.chatbot.digitranslab.com'
]

# Application definition
INSTALLED_APPS = [
    'corsheaders',
    'authentication',
    'app',
    'chat_user',
    'chat_dashboard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'chat_dashboard.middleware.UpdateLastActivityMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config_settings.DB_NAME,
        'USER': config_settings.DB_USER,
        'PASSWORD': config_settings.DB_PASS,
        'HOST': config_settings.DB_HOST,
        'PORT': config_settings.DB_PORT
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Minsk'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    BASE_DIR / "chat_dashboard" / "static",
    BASE_DIR / "chat_user" / "static",
    BASE_DIR / "authentication" / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'chat_dashboard.User'

LDAP_SERVER = config_settings.LDAP_SERVER
DOMAIN = config_settings.DOMAIN
BASE_DN = config_settings.base_dn

AUTHENTICATION_BACKENDS = (
    'authentication.backends.CustomAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
)


def authenticate(username, password):
    from ldap3 import Server, Connection, ALL

    user_dn = f"{username}@{DOMAIN.lower()}"
    server = Server(LDAP_SERVER, get_info=ALL)

    try:
        conn = Connection(server, user=user_dn, password=password)
        if conn.bind():
            return True
        else:
            return False
    except Exception as e:
        print(f"Ошибка аутентификации: {e}")
        return False


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config_settings.EMAIL_HOST
EMAIL_PORT = config_settings.EMAIL_PORT
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config_settings.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = config_settings.EMAIL_HOST_PASSWORD
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

SITE_URL = 'http://localhost:8000'

from logging.handlers import TimedRotatingFileHandler
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'django_file': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'django_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',  # Ротация каждый день
#             'interval': 1,  # Интервал в 1 день
#             'backupCount': 365,  # Хранить логи за 365 дней
#             'formatter': 'verbose',
#         },
#         'app_file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'app_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'chat_user': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'chat_user_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'm',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'chat_dashboard': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'chat_dashboard_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'M',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'authentication': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'authentication_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'chat_dashboard_error': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'chat_dashboard_error_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'chat_user_error': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'chat_user_error_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#         'authentication_error': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'authentication_error_%Y-%m-%d.log'),  # Файл с датой
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 365,
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['django_file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'chat_user': {
#             'handlers': ['chat_user'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'chat_dashboard': {
#             'handlers': ['chat_dashboard'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'authentication': {
#             'handlers': ['authentication'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'chat_user_error': {
#             'handlers': ['chat_user_error'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'chat_dashboard_error': {
#             'handlers': ['chat_dashboard_error'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'authentication_error': {
#             'handlers': ['authentication_error'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['django_file'],
#             'propagate': False,
#         },
#         'django.request': {
#             'level': 'DEBUG',
#             'handlers': ['django_file'],
#             'propagate': False,
#         },
#         'django.server': {
#             'level': 'DEBUG',
#             'handlers': ['django_file'],
#             'propagate': False,
#         },
#     },
# }

LOG_DATE_FORMAT = datetime.now().strftime('%Y-%m-%d')  # Формат даты

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'django_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'when': 'midnight',  # Ротация каждые 24 часа
            'interval': 1,
            'backupCount': 30,  # Хранить логи за 30 дней
            'formatter': 'verbose',
        },
        'app_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'app.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'chat_user': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'chat_user.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'chat_dashboard': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'chat_dashboard.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'authentication': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'authentication.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'chat_dashboard_error': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'chat_dashboard_error.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'chat_user_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'chat_user_error.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'authentication_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'authentication_error.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'chat_user': {
            'handlers': ['chat_user'],
            'level': 'INFO',
            'propagate': False,
        },
        'chat_dashboard': {
            'handlers': ['chat_dashboard'],
            'level': 'INFO',
            'propagate': False,
        },
        'authentication': {
            'handlers': ['authentication'],
            'level': 'INFO',
            'propagate': False,
        },
        'chat_user_error': {
            'handlers': ['chat_user_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'chat_dashboard_error': {
            'handlers': ['chat_dashboard_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'authentication_error': {
            'handlers': ['authentication_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['django_file'],
            'propagate': False,
        },
        'django.request': {
            'level': 'DEBUG',
            'handlers': ['django_file'],
            'propagate': False,
        },
        'django.server': {
            'level': 'DEBUG',
            'handlers': ['django_file'],
            'propagate': False,
        },
    },
}
