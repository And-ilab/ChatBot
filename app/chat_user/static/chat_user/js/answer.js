const userMessageHandler = async (message) => {
    const cleanedMessage = message
        .trim()
        .replace(/[^\w\s–∞-—è–ê-–Ø—ë–Å]/g, '')
        .toLowerCase();

    const isGreeting = greetings.some(greeting => cleanedMessage.includes(greeting));
    const isMenu = menu.some(menu => cleanedMessage.includes(menu));

    if (isGreeting) {
        showGreetingMessages();
        return;
    }

    else if (isMenu) {
        await showSectionButtons();
        return;
    }

    const children = chatMessagesArea.children;
    if (children.length >= 2) {
        const thirdLastChild = children[children.length - 2];
        if (thirdLastChild) {
            const text = [...thirdLastChild.childNodes]
                .filter(node => node.nodeType === 3)
                .map(node => node.textContent.trim())
                .join(' ');

            console.log(text);
            const normalizedText = text.replace(/\s+/g, ' ').trim();
            if (normalizedText === '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —è –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ?') {
                await sendFeedback('dislike', message);
                await sendThanksFeedbackMessage();
                return;
            }
        }
    } else {
        return;
    }

    await recognizeAndProcessMessage(message);
}

const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];

const showGreetingMessages = async () => {
    const username = state['username'];
    const responses = [
        `–ü—Ä–∏–≤–µ—Ç, ${username}! üòä –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å.`,
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${username}! üëã –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${username}! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º.`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –ù–∞–¥–µ—é—Å—å, —É –í–∞—Å –≤—Å—ë —Å—É–ø–µ—Ä üòä!`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}! üòä`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –†–∞–¥ –í–∞—Å –≤–∏–¥–µ—Ç—å.`,
        `–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, ${username}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! üòä –ö–∞–∫ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –í–∞—à –¥–µ–Ω—å –ª—É—á—à–µ?`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${username}! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å —á–µ–º –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?`,
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${username}! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, [–ò–º—è]! üòä –î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º –í–∞—à –≤–æ–ø—Ä–æ—Å.`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å.`,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${username}! üëã –ß–µ–º –º–æ–≥—É –í–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å?`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º.`,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${username}! üòä –ö–∞–∫ —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?`,
        `–ü—Ä–∏–≤–µ—Ç, ${username}! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.`,
        `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, ${username}! üòä –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?`,
    ];

    const greetingOptions = [
        '–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.',
        '–ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É –≤ –º–µ–Ω—é.',
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.',
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å ‚Äî —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!',
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.',
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.',
        '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.',
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.',
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚Äî —è –Ω–∞ —Å–≤—è–∑–∏!',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.',
        '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.',
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.',
        '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç.',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.',
        '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.'
    ];
    const messages = [getRandomElement(responses), getRandomElement(greetingOptions)];

    for (const message of messages) {
        appendMessage('bot', message, getTimestamp());
        await sendBotMessage(message);
    }
    await showSectionButtons();
};

async function recognizeAndProcessMessage(cleanedMessage) {
    try {
        hideUIElements();
        disableUserActions();
        typingBlock.style.display = 'flex';
        const recognizedQuestion = await recognizeQuestion(cleanedMessage);
        if (recognizedQuestion) {
            await processRecognizedQuestion(recognizedQuestion);
        } else {
            await handleUnrecognizedMessage(cleanedMessage);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    } finally {
        typingBlock.style.display = 'none';
    }
}

function hideUIElements() {
    menuButtonsContainer.style.display = 'none';
    chatMessagesArea.style.height = '560px';
    menuButton.style.display = 'none';
}

async function recognizeQuestion(message) {
    try {
        const response = await fetch("/api/recognize-question/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
            },
            body: JSON.stringify({ message }),
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        return data.recognized_question || null;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error.message);
        return null;
    }
}

async function processRecognizedQuestion(questionContent) {
    try {
        console.log(questionContent);
        const encodedContent = encodeURIComponent(questionContent);
        const response = await fetch(`/api/get-question-id-by-content/?questionContent=${encodedContent}`, { method: 'GET' });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –≤–æ–ø—Ä–æ—Å–∞: ${response.status} - ${await response.text()}`);
        }

        const data = await response.json();
        const questionID = data.result["@rid"];
        await showAnswer(questionID, 'recognition');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", error.message);
    }
}

async function handleUnrecognizedMessage(message) {
    const botAnswerMessage = "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.";
    appendMessage("bot", botAnswerMessage, getTimestamp());
    await sendBotMessage(botAnswerMessage);

    try {
        const response = await fetch("/api/create-training-message/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
            },
            body: JSON.stringify({ sender_id: state["user_id"], content: message }),
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:", error.message);
    } finally {
        enableUserActions();
    }
}
